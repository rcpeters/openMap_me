<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <script src="/socket.io/socket.io.js"></script> 
	<link rel="stylesheet" href="http://code.jquery.com/mobile/1.2.0-rc.1/jquery.mobile-1.2.0-rc.1.min.css" />
	<script src="http://code.jquery.com/jquery-1.8.1.min.js"></script>
	<script src="http://code.jquery.com/mobile/1.2.0-rc.1/jquery.mobile-1.2.0-rc.1.min.js"></script>
    <script src="/javascripts/underscore-min.js"></script>
    <script src="/javascripts/backbone-min.js"></script>
	<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>
		
	<script>
		var M={}, V={}, C={};
		var mapId = '<%=map.id%>';
		var map = <%-JSON.stringify(map)%>;
		var cookieId = '<%=cookieId%>';
		var oMapCookie = null;
		
		var socket = io.connect();
		var user = null;
		var userId = null;
		var nameView = null;
		var userCollection = null;
		var pollUserInfoInterval =  null;
		var watchId;
		var geoLoc;
		
		socket.on('initUser', function (data) {
			initUser(JSON.parse(data));
		});
				
		socket.on('usersUpdate', function (data) {
			var users = JSON.parse(data);
			console.log("usersUpdate");

			for (uX in users) {
				console.log("updating user" + users[uX].id + " " + users[uX].name);
				userCollection.addUpdate(users[uX]);
			}
		});
		
		socket.on('userUpdate', function (data) {
			var user = JSON.parse(data);
			console.log("userUpdate"); 
			console.log("updating user" + user.id + " " + user.name);
			userCollection.addUpdate(user);
		});
		

		// make underscore js use {{ }}
		_.templateSettings = {
			interpolate : /\{\{(.+?)\}\}/g
		};

		// we should generate this server side
		function generateId() {
			var time = (new Date()).getTime();
			var rand = Math.floor((Math.random()*10000));
			return time.toString(16)+":"+rand.toString(16);
		}
	
		M.User = Backbone.Model.extend({
			initialize: function(){
			   this.on('change', 
					function(m) {
						//alert("change user" + m.id);
						return true;
					}, this);
			}
		});
		
		M.LocalUser = Backbone.Model.extend({
			initialize: function(){
			   this.on('change', 
					function(m) {
						this.emitUser();
						return true;
					}, this);
				this.writeCookie();
			},
			writeCookie: function() {
				setOMapCookie(this.get('name'), this.get('id'), mapId);
				return true;
			},
			emitUser: function() {
				setOMapCookie(this.get('name'), this.get('id'), mapId);
				console.log("userUpdate" + this.get('id'));
				socket.emit('userUpdate', {'user': this, 'mapId': mapId});
				return true;
			}
			
		});
	
		M.Users = Backbone.Collection.extend({
			model: M.User,
			addUpdate: function(m) {
				if (this.get(m.id) == undefined) { 
					this.add(m);
				} else {
					this.get(m.id).set(m);
				}
			}
		});
	
		V.NameLi = Backbone.View.extend({
			initialize: function() {
				this.model.bind('change', this.render, this);
				this.model.bind('destroy', this.remove, this);
			},
			
			tagName:  "li",
			
			templateNoPos: _.template( "{{name}}"),
			
			templateHasPos: _.template( "{{name}}, {{pos.coords.latitude}}, {{pos.coords.longitude}} {{pos.timestamp}}"),
			
			render: function(event){
				var modelJson = this.model.toJSON();
								
				if (modelJson.pos != undefined && modelJson.pos.coords != undefined) {
					this.$el.html(this.templateHasPos(modelJson));
				} else {
					this.$el.html(this.templateNoPos(modelJson));
				}
				
				return this;
			}
		});
	
		V.NameLis =  Backbone.View.extend({
			tagName: 'ul',

			events: {
				// only whole collection events (like table sorting)
				// each child view has it's own events
			},
			
			initialize: function()	{
				this.nameLiViews = {}; // view chache for further reuse
				this.lablesGMap = {}; // view chache for further reuse
				this.count = 0;
				//_(this).bindAll('add');
				this.collection.bind('add', this.render, this);
				this.collection.bind('change', this.render, this);
			},
			
			zoomAll: function() {
					var bounds = new google.maps.LatLngBounds();
					for (x in this.lablesGMap) {
						if (this.lablesGMap[x].getMap()) bounds.extend(this.lablesGMap[x].position);
					}
					map.fitBounds(bounds);
			},
			
			center: function(uId) {
				map.setCenter(this.lablesGMap[uId].position);
			},
			
			render: function()	{	
				var colView = this;
				
				this.collection.each(function (m) {
					var curLiV = null;
					if (colView.nameLiViews[m.id] == undefined) {
						colView.nameLiViews[m.id] = new V.NameLi({
							model: m
						});
						colView.$el.append(colView.nameLiViews[m.id].render().el);
						 
					}  else {
						colView.nameLiViews[m.id].render();
					}
					
					if (m.get('pos').coords) {
						var date = new Date(m.get('pos').timestamp);
						if (!colView.lablesGMap[m.id]) {
							colView.lablesGMap[m.id] = new Label({
								map: map,
								position: new google.maps.LatLng(m.get('pos').coords.latitude,
                                             m.get('pos').coords.longitude),
								text: '<strong>'+m.get('name')+'</strong> '
							});
							colView.count = colView.count + 1;
							
							/*
							if (userId == m.id)	{
								(function(userId) {
									new CenterControl("Center On Me",map, function() {
										nameLiViews.center(userId);
									});
								})(m.get('id'));
							}
							*/
							
							/*
							if (colView.count == 2)	{
								new CenterControl("Zoom All",map, function() {
									nameLiViews.zoomAll();
								});
							}
							
							if (colView.count == 1) colView.center(m.id);
							else colView.zoomAll();
							*/
						} else {
							colView.lablesGMap[m.id].setValues({
								position: new google.maps.LatLng(m.get('pos').coords.latitude,
                                             m.get('pos').coords.longitude),
								text: '<strong>'+m.get('name')+'</strong> '
							});
						}
						
						// we should change this to not reference jquery mobile selects directly
						if ($('#show-recent').val() == 'Show Recent') {
							if ((new Date()).getTime() > m.get('pos').timestamp + (10 * 60 * 1000)) {
								if (colView.lablesGMap[m.id].getMap() != null) colView.lablesGMap[m.id].setMap(null);
							} else {
								if (colView.lablesGMap[m.id].getMap() == null) colView.lablesGMap[m.id].setMap(map);
							}
						} else {
							colView.lablesGMap[m.id].setMap(map);
						}
					}
					
				});
				
				// we should refactor to remove jqmobile refereces
				if ($('#map-zoom').val() == 'Zoom All') {
					this.zoomAll();
				}
					
				if ($('#map-zoom').val() == 'Center On Me' && colView.lablesGMap[userId]) {
					colView.center(userId);
				}
				
				return this;
			}
		});
	
		V.Name = Backbone.View.extend({
			initialize: function() {
				this.model.bind('change', this.render, this);
			},
			template : _.template( "{{name}}"),
			render: function(event) {
				this.$el.html(this.template(this.model.toJSON()));
				return this;
			}
		});
	
		// just use View to update jqm object
		V.NameEdit = Backbone.View.extend({
			initialize: function() {
				this.model.bind('change', this.render, this);
			},
			
			events: {
				 "change":   "saveName",
			},
			
			render: function(event){
				this.$el.val(this.model.get("name"));
				return this;
			},
			
			saveName: function(event) {
				this.model.set({'name':this.$el.val()}); 
			}
		});
		
		function watchGPS() {
			if(navigator.geolocation){
				// timeout at 60000 milliseconds (60 seconds)
				var options = {timeout:6000000};
				geoLoc = navigator.geolocation;
				watchID = geoLoc.watchPosition(showLocation, 
												gpsErrorHandler,
												options);
			}else{
				alert("Sorry, browser does not support geolocation!");
			}
		}
		
		function turnOffWatchGPS () {
			 navigator.geolocation.clearWatch(watchId);
		}
		
		function showLocation(pos) {
			if (   !user.get('pos').coords 
				|| newerThen1Min(pos, user.get('pos'))
				|| !sameLatLong(pos, user.get('pos'))) {
				console.log(JSON.stringify(pos.coords));
				console.log(user.get('pos').coords);
				user.set({'pos': pos});
			}			
		}
		
		function sameLatLong(pos1, pos2) {
			if (pos1.coords.longitude != pos2.coords.longitude) return false;
			if (pos1.coords.latitude != pos2.coords.latitude) return false;
			return true;
		}
		
		function newerThen1Min(pos1,pos2) {
			if (pos1.timestamp > pos2.timestamp + (1 * 60 * 1000) ) return true;
			return false;
		}
				
		function gpsErrorHandler(error) {
			switch(error.code) {
				case error.PERMISSION_DENIED:
				alert("User denied the request for Geolocation.");
				break;
			case error.POSITION_UNAVAILABLE:
				alert("Location information is unavailable.");
				break;
			case error.TIMEOUT:
				alert("The request to get user location timed out.");
				break;
			case error.UNKNOWN_ERROR:
				alert("An unknown error occurred.");
				break;
			}
			console.log(error);
		}
		  
		function getCookie(c_name) {
			var i,x,y,ARRcookies=document.cookie.split(";");
			for (i=0;i<ARRcookies.length;i++) {
				x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
				y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
				x=x.replace(/^\s+|\s+$/g,"");
				if (x==c_name) {
					return unescape(y);
				}
			}
		}
		
		function setCookie(c_name,value,exdays) {
			var exdate=new Date();
			exdate.setDate(exdate.getDate() + exdays);
			var c_value=escape(value) + ((exdays==null) ? "" : "; expires="+exdate.toUTCString());
			document.cookie=c_name + "=" + c_value + ";path=/;";
		}
		
		function setOMapCookie(username, uId, mapId) {
			if (oMapCookie == null) oMapCookie = { maps: {} };
			oMapCookie.curMapId = mapId;
			console.log(oMapCookie);
			console.log(Object.keys(oMapCookie.maps).length);
			// keep the cookie size down, by limiting to 10 maps or less
			while (Object.keys(oMapCookie.maps).length > 10) {
				delete(oMapCookie.maps[Object.keys(oMapCookie.maps)[0]]);
			}
			oMapCookie.maps[mapId] = { 'username': username, 'uId': uId };
			setCookie(cookieId, JSON.stringify(oMapCookie), 10000);
		}
		
		function getOMapCookie() {
			var cookie = getCookie(cookieId);
			if (cookie) {
				console.log(cookie);
				oMapCookie = JSON.parse(cookie);
				return oMapCookie;
			}
			return null;
		}
		
		function init() {
			resize();
			$('#index').live('pageshow', function() {
				resize();
			});
			
			var cookie = getOMapCookie();
			if (cookie) {
				if (cookie.maps[mapId]) userId = cookie.maps[mapId].uId;
			}
			userCollection = new M.Users();
			nameLiViews = new V.NameLis({collection: userCollection, el: $("#userColl")});
			console.log("initUser via server");
			socket.emit("initUser", {'mapId': mapId, 'id':userId});			
			$('#show-recent').bind('change', function() {
				nameLiViews.render();
			});
			$('#map-zoom').bind('change', function() {
				nameLiViews.render();
			});

		}
		
		function initUser(u) {
			user = new M.LocalUser(u);
			nameView = new V.Name({model: user, el: $("#user")});
			nameEditView = new V.NameEdit({model: user, el: $("#editname")});
			nameView.render();
			nameEditView.render();
			watchGPS();
			
			
			socket.on('disconnect', function(data) {
				console.log('disconnected disconnected disconnected disconnected disconnected disconnected disconnected ');
				turnOffWatchGPS();
			});

			socket.on('connect', function(data) {
				console.log('connected connected connected connected connected connected connected ');
				watchGPS();
				socket.emit("initUser", {'mapId': mapId, 'id':userId});
			});			
		}
		
		function resize() {
			var navBarHeight = $('#map-nav-bar li').height();
			var mapControlHeight = $('#map-controls').height();
			$('#map_canvas').height($(window).height() - navBarHeight - mapControlHeight);
			$('#map_canvas').width($('#map-content').width());
			google.maps.event.trigger(map, "resize");
		}
		
		$(function() {
			$.mobile.loading( 'show' );
			init();
			initializeMaps();
			$('#save-button').click( function () {
			console.log('here' + $('#mapIdEdit').val() + " " + mapId);
				if ( mapId != $('#mapIdEdit').val()) window.url = "/m" + $('#mapIdEdit').val();
			});
			$(window).resize(resize);
			$.mobile.loading( 'hide' );
		});
		
	</script>
	<script>
    var map;
	  
    function CenterControl(name, map, callback) {
		var controlDiv = document.createElement('div');
		
		// Set CSS styles for the DIV containing the control
        // Setting padding to 5 px will offset the control
        // from the edge of the map
        controlDiv.style.padding = '5px';

        // Set CSS for the control border
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = 'white';
        controlUI.style.borderStyle = 'solid';
        controlUI.style.borderWidth = '2px';
        controlUI.style.cursor = 'pointer';
        controlUI.style.textAlign = 'center';
        controlUI.title = 'Click to center on ' + name;
        controlDiv.appendChild(controlUI);

        // Set CSS for the control interior
        var controlText = document.createElement('div');
        //controlText.style.fontFamily = 'Arial,sans-serif';
        controlText.style.fontSize = '12px';
        controlText.style.paddingLeft = '4px';
        controlText.style.paddingRight = '4px';
        controlText.innerHTML = '<b>' + name + '</b>';
        controlUI.appendChild(controlText);

        // Setup the click event listeners: simply set the map to
        // Chicago
		
		controlDiv.index = map.controls[google.maps.ControlPosition.RIGHT_CENTER].length + 1;
		
        google.maps.event.addDomListener(controlUI, 'click', function() {
			callback();
        });
		
		map.controls[google.maps.ControlPosition.TOP_RIGHT].push(controlDiv);
    }
	  
	  
	  
	// Define the overlay, derived from google.maps.OverlayView
	function Label(opt_options) {
		 // Initialization
		 this.setValues(opt_options);

		 // Label specific
		 var span = this.span_ = document.createElement('span');
		 span.style.cssText = 'position: relative; left: 0px; top: 0px;' +
							  'white-space: nowrap; border: 1px solid #8B0000; border-bottom: 0px; border-right: 0px;' +
							  'padding: 2px; padding-left: 4px; padding-right: 5px; background-color:rgba(0,0,0,0.1);'

		 var div = this.div_ = document.createElement('div');
		 div.appendChild(span);
		 div.style.cssText = 'position: absolute; display: none';
	};
	
	Label.prototype = new google.maps.OverlayView;

	Label.prototype.getPosition = function () {
		return this.position;
	};
	
	// Implement onAdd
	Label.prototype.onAdd = function() {
		var pane = this.getPanes().overlayLayer;
		pane.appendChild(this.div_);

		// Ensures the label is redrawn if the text or position is changed.
		var me = this;
		this.listeners_ = [
			google.maps.event.addListener(this, 'position_changed',
			function() { me.draw(); }),
			google.maps.event.addListener(this, 'text_changed',
			function() { me.draw(); })
		];
	};

	// Implement onRemove
	Label.prototype.onRemove = function() {
		this.div_.parentNode.removeChild(this.div_);

		// Label is removed from the map, stop updating its position/text.
		for (var i = 0, I = this.listeners_.length; i < I; ++i) {
			google.maps.event.removeListener(this.listeners_[i]);
		}
	};

	// Implement draw
	Label.prototype.draw = function() {
		var projection = this.getProjection();
		var position = projection.fromLatLngToDivPixel(this.get('position'));

		var div = this.div_;
		div.style.left = position.x + 'px';
		div.style.top = position.y + 'px';
		div.style.display = 'block';

		this.span_.innerHTML = this.get('text').toString();
	};

    function initializeMaps() {
        var mapOptions = {
          zoom: 6,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById('map_canvas'),
            mapOptions);

        // Try HTML5 geolocation
        if(navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var pos = new google.maps.LatLng(position.coords.latitude,
                                             position.coords.longitude);
            map.setCenter(pos);
          }, function() {
            handleNoGeolocation(true);
          });
        } else {
          // Browser doesn't support Geolocation
          handleNoGeolocation(false);
        }
    }

      function handleNoGeolocation(errorFlag) {
        if (errorFlag) {
          var content = 'Error: The Geolocation service failed.';
        } else {
          var content = 'Error: Your browser doesn\'t support geolocation.';
        }

        var options = {
          map: map,
          position: new google.maps.LatLng(60, 105),
          content: content
        };

        var infowindow = new google.maps.InfoWindow(options);
        map.setCenter(options.position);
      }

      
	 </script>
  </head>
  <body>
  
	<div id="index" data-role="page">
		<div id="map-controls" data-role="header" data-theme="a" class="ui-bar">
			
			<div data-role="controlgroup" data-type="horizontal">
				<select name="show-recent" id="show-recent" data-mini="true">
					<option value="Show Recent">Show Recent</option>
					<option value="Show All">Show All</option>
				</select> 
				<select name="map-zoom" id="map-zoom" data-mini="true">
					<option value="Zoom All">Zoom All</option>
					<option value="Center On Me">Center On Me</option>
					<option value="No Zooming">No Zooming</option>
				</select> 
			</div>
		</div>		
		<div data-role="content" style="width: 100%; height: 100%; padding: 0px; margin: 0px;" id="map-content">	
			<div id="map_canvas" style="width: 400px; height: 500px; padding: 0px; background-color: #F0FFFF;">	
			</div>
		</div>
		<div id="map-nav-bar"  data-role="footer" data-position="fixed">
				<div data-role="navbar" data-fullscreen="true" data-theme="a">
					<ul>
						<li><a href="#inputs" data-transition="slide" data-icon="gear">ID: <span id="user"></span></a></li>
						<li><a href="#list" data-transition="slide" data-icon="grid">List</a></li>
						<li><a href="#why" data-transition="slide" data-icon="info">Info</a></li>
					</ul>
				</div>
		</div>
	</div>
	<div data-role="page" id="inputs">
		<div data-role="content">
			Change Map ID:
			<input name="mapIdEdit" data-mini="true" data-inline="true" id="mapIdEdit" value="<%=map.id%>" />
			<br />
			Choose a different id: 
			<input name="editname" data-mini="true" data-inline="true" id="editname" value="" />
			<a href="#" data-role="button" data-mini="true" data-inline="true" data-rel="back" id="save-button">Save</a>
		</div>
	</div>
	<div data-role="page" id="list">
		<div data-role="content">
			<ul id="userColl"></ul>
			<br />
			<a href="#" data-role="button" data-mini="true" data-inline="true" data-rel="back" id="why-back-button">Back</a>
		</div>
	</div>	
	<div data-role="page" id="why">
		<div data-role="content">
			Where are you? It's a question the comes up often with my friends. Firing up Google Latitude 
			and other location apps worked great, that is when my friends had it installed....<br />
			<br />
			Using the CB radios of my youth as an inspiration, maybe just knowing the channel was enough to start communicating. 
			Just share the unique url (much like a channel) and browser will start communicating your location. <br />
			<br />
			<a href="#" data-role="button" data-mini="true" data-inline="true" data-rel="back" id="why-back-button">Back</a>
		</div>
	</div>
  </body>
</html>